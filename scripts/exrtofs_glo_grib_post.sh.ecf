#!/bin/ksh

###############################################################################
####  UNIX Script Documentation Block                                         #
#                                                                             #
# Script name:         exrtofs_glo_grib_post.sh.sms                           #
# Script description:                                                         #
#                                                                             #
# Authors: Bhavani Rajan & Ilya Rivin  Org: NP23         Date: 2011-07-20     #
#                                                                             #
# Abstract: This is the post_grib for RTOFS_GLO                               #
#           Writes out hourly netcdf files for nowcast and 1-72 hr forecast   #
#           and 3-hrly from 72-144 hrs forecast                               #
#           Also packs the netcdf files in GRIB2 format                       #
#           These are surface only (2d) diag and prog files                   #
#                                                                             #
# Sub-scripts called:                                                         # 
#                    rtofs_glo2d_3hrly.sh                                     #
#                    rtofs_glo2d_1hrly.sh                                     #
#                    create_regions_mpmd_weights.sh                           #
#                                                                             # 
# Imported variables:                                                         #
#                    RUN                                                      #
#                    modID                                                    #
#                    PARMrtofs                                                #
#                    USHrtofs                                                 #
#                    DATA                                                     #
#                    COMOUT                                                   #
#                    RUN_MODE                                                 #  
#                    SENDCOM                                                  #
#                    PDY                                                      #  
#                    mycyc                                                    #
#                    analdays                                                 #
#                    inputgrid                                                #
#                                                                             #
#                                                                             #
# Script history log:                                                         #
# XXXX-XX-XXX  Joe Dow                                                        #
#                                                                             #
###############################################################################

set -xa

export PS4='$SECONDS + '

cd $DATA

###
### NOTE: Move copying to forecast step
###

msg="RTOFS_GLO_GRIB_POST JOB has begun on `hostname` at `date`"
postmsg "$jlogfile" "$msg"

procstatus=0

typeset -Z3 fhr
typeset -Z3 fhr0
typeset -Z3 intvl_3hrly
typeset -Z3 intvl_1hrly
typeset -Z3 hr_2d_1hrly
typeset -Z3 hr_2d_hrly
typeset -Z3 ENDHOUR
typeset -Z3 firsthr
typeset -Z3 lasthr



# Define the end forecast hour here:

export PDY=$PDY
if [ ${RUN_MODE} = 'analysis' ]
then
  export analdays=${analdays:-2}
  export enddate=${analysis_end:-$PDY}
  export startdate=`$utilexec/ndate -\` expr $analdays \* 24 \`  ${enddate}'00' | cut -c1-8`
  export ENDHOUR=`expr $analdays \* 24`
fi
if [ ${RUN_MODE} = 'forecast' ]
then
  export fcstdays=${fcstdays:-3}
  export startdate=${startdate:-${PDY}}
  export enddate=`$utilexec/ndate \` expr $fcstdays \* 24 \`  ${startdate}${mycyc} | cut -c1-8`
  export ENDHOUR=`expr \( $fcstdays \+ ${fcstdays_before_thisstep} \) \* 24 `
fi

# define what functions to do (default to operational settings)
export running_realtime=${running_realtime:-NO}
export run_parallel=${run_parallel:-NO}
export surface_1hrly=${surface_1hrly:-YES}
export grib_1hrly=${grib_1hrly:-YES}
export intvl_1hrly=${intvl_1hrly:-1}
export intvl_3hrly=${intvl_3hrly:-3}
export no_procs=${NPROCS:-4} # no of processors used in poe

if [ ${RUN_MODE} = 'analysis' ]
then
  export surface_3hrly=${surface_3hrly:-YES}
  export surface_1hrly=${surface_1hrly:-NO}
fi
if [ ${RUN_MODE} = 'forecast' ]
then
  if [ ${fcstdays_before_thisstep} -ge 3 ]
  then
     export surface_3hrly=${surface_3hrly:-YES}
     export surface_1hrly=${surface_1hrly:-NO}
  else
     export surface_3hrly=${surface_3hrly:-NO}
     export surface_1hrly=${surface_1hrly:-YES}
  fi
fi

echo $surface_1hrly $surface_3hrly

# Waiting time (in 10 sec)
icnt_max=180

# Define the Input files:
export DEPTHFILEa=${FIXrtofs}/${RUN}_${modID}.${inputgrid}.regional.depth.a
export DEPTHFILEb=${FIXrtofs}/${RUN}_${modID}.${inputgrid}.regional.depth.b
export GRIDFILEa=${FIXrtofs}/${RUN}_${modID}.${inputgrid}.regional.grid.a
export GRIDFILEb=${FIXrtofs}/${RUN}_${modID}.${inputgrid}.regional.grid.b
                          
# Copy in the Fix files:
cp -f -p $GRIDFILEa  ${DATA}/regional.grid.a
cp -f -p $GRIDFILEb  ${DATA}/regional.grid.b
cp -f -p $DEPTHFILEa ${DATA}/regional.depth.a
cp -f -p $DEPTHFILEb ${DATA}/regional.depth.b

# Copy in the Parm Files:
cp -f -p ${PARMrtofs}/${RUN}_${modID}.${inputgrid}.archv2ncdf2d.in ${DATA}/archv2ncdf2d.in

if [ ${RUN_MODE} = 'analysis' ]
then
  fhr=000
  export mode=n
  analhrs=`expr $analdays \* 24` 
fi
if [ ${RUN_MODE} = 'forecast' ]
then
  fhr=`expr \${fcstdays_before_thisstep} \* 24`
  export mode=f
fi
export fhr0=$fhr

if [ ${RUN_MODE} = 'forecast' ] && [ ${fcstdays_before_thisstep} -ge 3 ]
then
   fhr=`expr $fhr + $intvl_3hrly`
else
   fhr=`expr $fhr + $intvl_1hrly`
fi

# srtarting hours
export hr_2d_hrly=`expr $fhr0 \+ 3`
export hr_2d_1hrly=`expr $fhr0 \+ 1`


echo fhr $fhr ENDHOUR $ENDHOUR
# Output NC header information for surface AND volume files

export CDF_TITLE='HYCOM ATLb2.00'
export CDF_INST="National Centers for Environmental Prediction"

while [ $fhr -le $ENDHOUR ]
do
  # Some reverse engineering
  if [ $fhr -le 100 ] 
  then
    typeset -Z2 fhr2
    fhr2=$fhr
  else
    typeset -Z3 fhr2
    fhr2=$fhr
  fi
  if [ ${RUN_MODE} = 'forecast' ]
  then
    arfile_tplate=${RUN}_${modID}.t${mycyc}z.${mode}${fhr2}.archv
  fi
  if [ ${RUN_MODE} = 'analysis' ]
  then
    typeset -Z2 fhr3
    fhr3=`expr $analhrs - $fhr2`
    if [ $fhr -eq $ENDHOUR ]; then
       arfile_tplate=${RUN}_${modID}.t${mycyc}z.${mode}00.archv
    else
       arfile_tplate=${RUN}_${modID}.t${mycyc}z.${mode}-${fhr3}.archv
    fi
  fi
  #*********************************
  if [ $run_parallel = 'YES' ]; then
    # wait for the new forecast output to be available:
    icnt=1
    if [ ! -f ${arfile_tplate}.a ]; then
      break

      print Sleeping $icnt times while waiting for ${arfile_tplate}.a
      sleep 10
      icnt=$((icnt + 1))
      if [ $icnt -ge $icnt_max ]
      then
        echo Post timed out, arfile_tplate not available after $icnt_max iterations.
        echo "NOTdone" >${RUN}_${modID}.t${mycyc}z.nav.log
        export err=2; err_chk
      fi
    fi

  fi # end loop for run_parallel
  #*********************************
  # link current archive to the working directory
  rm -rf archv.a archv.b > /dev/null

  if [ -s $COMOUT/${arfile_tplate}.a ]; then
    ln -s -f $COMOUT/${arfile_tplate}.a archv.a
    ln -s -f $COMOUT/${arfile_tplate}.b archv.b
  else
    echo Missing archv file $COMOUT/${arfile_tplate}. >>${RUN}_${modID}.t${mycyc}z.nav.log
    echo "NOTdone due to missing archv file" >>${RUN}_${modID}.t${mycyc}z.nav.log
    export err=1; err_chk  
  fi
  missing=no
  for fn in regional.depth.a regional.depth.b regional.grid.a regional.grid.b archv.a archv.b archv2ncdf2d.in
  do
    if [ ! -f $fn ]
    then
      missing=yes
      echo Missing file $fn, will not be able to run >> ${RUN}_${modID}.t${mycyc}z.nav.log
    fi
  done
  if [ $missing = 'yes' ]
  then
    echo Cannot run due to missing files.
    echo "NOTdone" >>${RUN}_${modID}.t${mycyc}z.nav.log
    export err=1; err_chk
    exit
  fi

  # Now for the hourly runs: 1 hourly and 3 hourly for the surface files  
  #
  # 3 hourly for surface files
  if [ $fhr -eq $hr_2d_hrly ]; then
  echo $hr_2d_hrly hr_2d_1hrly $fhr fhr
    hr_2d_hrly=`expr $hr_2d_hrly + $intvl_3hrly`
    if [ $surface_3hrly = 'YES' ]
    then 
      ksh ${USHrtofs}/${RUN}_glo2d_3hrly.sh
      if [ $SENDCOM = 'YES' ]
      then
        for ftype in diag prog
        do
          cfile=${RUN}_${modID}_2ds_${mode}${fhr}_3hrly_${ftype}.nc
          cp -f -p $cfile  $COMOUT/.
          if [ $SENDDBN = YES ]
          then
            $DBNROOT/bin/dbn_alert MODEL RTOFS_GLO_NETCDF $job $COMOUT/$cfile
          else
            msg="File $COMOUT/$cfile not posted to db_net."
            postmsg "$jlogfile" "$msg"
          fi
        done
      fi
    fi # end of sfc loop
  fi # end of 3 hrly loop


 # 1 hourly for surface files
  if [ $fhr -eq $hr_2d_1hrly ]; then
  echo $hr_2d_1hrly hr_2d_1hrly $fhr fhr
    hr_2d_1hrly=`expr $hr_2d_1hrly + $intvl_1hrly`
    if [ $surface_1hrly = 'YES' ]
    then
      ksh ${USHrtofs}/${RUN}_glo2d_1hrly.sh
      if [ $SENDCOM = 'YES' ]
      then
        for ftype in diag prog
        do
          cfile=${RUN}_${modID}_2ds_${mode}${fhr}_1hrly_${ftype}.nc
          cp -f -p $cfile  ${COMOUT}/.
          if [ $SENDDBN = 'YES' ]
          then
            $DBNROOT/bin/dbn_alert MODEL RTOFS_GLO_NETCDF $job $COMOUT/$cfile
          else
            msg="File $COMOUT/$cfile not posted to db_net."
            postmsg "$jlogfile" "$msg"
          fi
        done
      fi

     fi # end of sfc loop
  fi # end of 1 hrly loop

if [ ${RUN_MODE} = 'forecast' ] && [ ${fcstdays_before_thisstep} -ge 3 ]
then
   fhr=`expr $fhr + $intvl_3hrly`
else
   fhr=`expr $fhr + $intvl_1hrly`
fi

done

# If you want to pack to grib then
    if [ $grib_1hrly = 'YES' ]
    then
      ksh ${USHrtofs}/${RUN}_create_regions_mpmd_weights.sh
    fi
if [ $SENDCOM = 'YES' ]
        then
# Copy them to grib output dir
    for ftype in alaska arctic bering guam gulf_alaska honolulu hudson_baffin samoa trop_paci_lowres west_atl west_conus
    do
      for cfile in `ls -C1 $DATA/$ftype/${RUN}_${modID}.t${mycyc}z.${mode}*_${ftype}_std.grb2`
      do
          cp -f -p $cfile  ${COMOUT}/.
          if [ $SENDDBN = 'YES' ]
          then
            $DBNROOT/bin/dbn_alert MODEL RTOFS_GLO_NETCDF $job $COMOUT/$cfile
          else
            cname=`basename $cfile`
            msg="File $COMOUT/$cname not posted to db_net."
            postmsg "$jlogfile" "$msg"
          fi
       done
     done
fi
      
if [ $procstatus = 0 ]
then
  if [ $running_realtime = 'YES' ]
  then
    md5=/usr/bin/md5sum
    if [ -x $md5 ]
    then
      cd $COMOUT
      # need definition of files
      for gfile in *.grb2
      do
        md5 $gfile >> $DATA/csum.$PDY$mycyc
      done
      for gfile in `ls -C1 ${RUN}_${modID}.t${mycyc}z.[fn]*_std.grb2`
      do
        $md5 $gfile >> $DATA/csum_nodc.$PDY$mycyc
      done
    fi
  fi

  echo "done" >$COMOUT/${RUN}_${modID}.t${mycyc}z.nav.log
  msg='THE RTOFS_GLO_GRIB_POST JOB HAS ENDED NORMALLY.'
  postmsg "$jlogfile" "$msg"
fi

#################################################
msg='THE RTOFS_GLO_GRI_POST JOB HAS ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
